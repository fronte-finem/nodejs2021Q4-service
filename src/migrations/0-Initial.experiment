import {
  EntityTarget,
  MigrationInterface,
  QueryRunner,
  Table,
  TableForeignKey,
} from 'typeorm';
import { Board } from '../resources/boards/board.model';
import { Column } from '../resources/column/column.model';
import { Task } from '../resources/tasks/task.model';
import { User } from '../resources/users/user.model';

type TableCreator = (
  Entity: EntityTarget<unknown>
) => Promise<ForeignKeysCreator>;
type ForeignKeysCreator = () => Promise<void>;

function getTableCreator(queryRunner: QueryRunner): TableCreator {
  return async (Entity: EntityTarget<unknown>): Promise<ForeignKeysCreator> => {
    const { connection } = queryRunner;
    const metadata = connection.getMetadata(Entity);
    const table = Table.create(metadata, connection.driver);
    await queryRunner.createTable(table, true, true);
    const foreignKeys = metadata.foreignKeys.map((metaFK) =>
      TableForeignKey.create(metaFK, connection.driver)
    );
    return async (): Promise<void> =>
      queryRunner.createForeignKeys(table, foreignKeys);
  };
}

export class Initial0Experiment implements MigrationInterface {
  // eslint-disable-next-line class-methods-use-this
  public async up(queryRunner: QueryRunner): Promise<void> {
    const createTable = getTableCreator(queryRunner);

    const createUserForeignKeys = await createTable(User);
    const createColumnForeignKeys = await createTable(Column);
    const createBoardForeignKeys = await createTable(Board);
    const createTaskForeignKeys = await createTable(Task);

    await createUserForeignKeys();
    await createColumnForeignKeys();
    await createBoardForeignKeys();
    await createTaskForeignKeys();
  }

  // eslint-disable-next-line class-methods-use-this
  public async down(queryRunner: QueryRunner): Promise<void> {
    const taskTable = await queryRunner.getTable(Task.name.toLowerCase());
    const columnTable = await queryRunner.getTable(Column.name.toLowerCase());
    const boardTable = await queryRunner.getTable(Board.name.toLowerCase());
    const userTable = await queryRunner.getTable(User.name.toLowerCase());

    if (taskTable) await queryRunner.dropTable(taskTable, true, true, true);
    if (columnTable) await queryRunner.dropTable(columnTable, true, true, true);
    if (boardTable) await queryRunner.dropTable(boardTable, true, true, true);
    if (userTable) await queryRunner.dropTable(userTable, true, true, true);
  }
}
